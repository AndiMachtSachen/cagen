
contract SafeEcs {
    output wl : int
    output tl : int
    output gate_closed : bool
    output duration : int
	
	clock timer : int
	
	open -> open :: wl <= tl ==> true
	open -> Closing :: wl > tl ==> true #timer
	Closing -> Closing :: ! gate_closed ==> timer < duration
	Closing -> Closed :: gate_closed ==> true
	Closed -> Closed :: wl > tl ==> true
	Closed -> Opening :: wl <= tl ==> true #timer
	Opening -> Opening :: gate_closed ==> timer < duration
	Opening -> open :: ! gate_closed ==> true
	
	
}


contract SafeEcsSkip {
    output wl : int
    output tl : int
    output gate_closed : bool
    output duration : int
	
	clock timer : int
	
	open -> open :: wl <= tl ==> true
	open -> Closing :: wl > tl & ! gate_closed ==> true #timer
	open -> Closed :: wl > tl & gate_closed ==> true #timer
	Closing -> Closing :: ! gate_closed ==> timer < duration
	Closing -> Closed :: gate_closed ==> true
	Closed -> Closed :: wl > tl ==> true
	Closed -> Opening :: wl <= tl & gate_closed ==> true #timer
	Closed -> open :: wl <= tl & ! gate_closed ==> true #timer
	Opening -> Opening :: gate_closed ==> timer < duration
	Opening -> open :: ! gate_closed ==> true
	
	
}



reactor Ecs  {
	input chw : int
    output wl : int
    output tl : int
    output duration : int
    output gate_closed : bool
	
    contract SafeEcs[wl <- wl]
    contract SafeEcsSkip[wl <- wl]

    {=
		std::this_thread::sleep_for(std::chrono::milliseconds(std::rand() % 10));
		
		tl = 50;
		duration = 15;
		wl += (chw % 10) - 4 - (wl > tl);
		gate_closed = wl > tl;
    =}
}



reactor DelayEcs  {
	input chw : int
    output wl : int
    output tl : int
    output duration : int
    output next_gate_closed : bool
    output gate_closed : bool
	
    contract SafeEcs[wl <- wl]
    contract SafeEcsSkip[wl <- wl]

    {=
		std::this_thread::sleep_for(std::chrono::milliseconds(std::rand() % 10));
		
		tl = 50;
		duration = 15;
		wl += (chw % 10) - 4 - (wl > tl);
																																		wl = std::rand() % 100;
		gate_closed = next_gate_closed;
		next_gate_closed = wl > tl;
    =}
}
